아래부분이 완성형 코드이다 처음에는
        Review review = Review.off(store);
        reviewRepository.save(review);
        return ReviewResponseDto.convertDto(review);
이런식으로 2번째 getReview에 연결을 해주려고 했다. 
그런데 계속 오류가 나서 이유를 찾아보니  createReview에서 이미 연관관계 즉,ManyToOne관계가 설정이 되어있기 때문에
 Review review = Review.of(request,user,order);이렇게 설정을 해놓아도 자동으로


    public static Review of(ReviewRequestDto request, User user, Order order) {
        return new Review(
                null,
                request.getComment(),
                request.getRate(),
                null,
                null,
                null
        );
    }
이런식으로 맨 마지막줄이 store가 null인값으로 넣어 줄 수가있게 되는것이였다




@Getter
@Service
@RequiredArgsConstructor

public class ReviewService {
    private final ReviewRepository reviewRepository;
    private final UserRepository userRepository;
    private final OrderRepository orderRepository;
    private final StoreRepository storeRepository;

    public ReviewResponseDto createReview(ReviewRequestDto request, long userId, HttpSession session){

        Long orderId = (Long) session.getAttribute("orderId");

        if (orderId == null) {
            throw new StoreException("주문 정보가 없습니다.", HttpStatus.BAD_REQUEST);
        }

        User user = userRepository.findById(userId)
                .orElseThrow(() ->  new StoreException("유저가 없습니다.", HttpStatus.NOT_FOUND));
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() ->  new StoreException("주문이 없습니다.", HttpStatus.NOT_FOUND));
        if (!order.getStatus().equals(OrderStatus.COMPLETED)) {
            throw new StoreException("배달 완료 되지 않은 주문은 리뷰를 작성할 수 없습니다.", HttpStatus.BAD_REQUEST);
        }
        if (request.getRate()<1 || request.getRate()>5) {
            throw new StoreException("별점 점수에 해당하지 않습니다.",HttpStatus.BAD_REQUEST);
        }
        Review review = Review.of(request,user,order);
        reviewRepository.save(review);
        return ReviewResponseDto.convertDto(review);


    }
    public List<ReviewResponseDto> getReview(Long storeId){
        Store store = storeRepository.findById(storeId)
                .orElseThrow(()-> new StoreException("가게 정보 오류 or 단건 조회 입니다.",HttpStatus.NOT_FOUND));

        List<Review> review = reviewRepository.findByStoreOrderByCreatedAtDesc(store);
        return review.stream()
                .map(ReviewResponseDto::convertDto)
                .toList();
    }

