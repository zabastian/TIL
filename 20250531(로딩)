Lazy vs Eager 에서 Proxy객체는 언제 생성되는것인가

@OneToMany, @ManyToMany : 지연로딩

Proxy 객체를 조회한다.
연관된 객체(Company)를 매번 함께 조회하는것은 낭비인 경우에 사용한다.

ex)
Order order = orderRepository.findById(1L).get();
Member member = order.getMember(); // 프록시 객체 (HibernateProxy)

--------------------------------------------------------

@ManyToOne, @OneToOne : 즉시로딩

Proxy 객체를 조회하지 않고 한 번에 연관된 객체까지 조회한다.
연관된 객체(Company)를 매번 함께 조회하는것은 낭비인 경우에 사용한다.

ex)
Order order = orderRepository.findById(1L).get();
Member member = order.getMember(); // 이 시점에 쿼리가 나가서 실제 Member 로드
String name = member.getName();    // 그냥 필드값 접근 (DB 조회 없음)

즉, Fetch 전략이 LAZY일 때 프록시가 사용됨.

| 코드                           | EAGER (즉시 로딩)        | LAZY (지연 로딩)                  |
| ---------------------------- | -------------------- | ----------------------------- |
| `orderRepository.findById()` | ⭕ **JOIN 쿼리 발생**     | ⭕ `Order`만 조회 (연관 엔티티 쿼리 ❌)   |
| `order.getMember()`          | ❌ 쿼리 안 나감 (이미 로딩됨)   | ❌ 쿼리 안 나감, **프록시 객체 반환**      |
| `member.getName()`           | ❌ 쿼리 안 나감 (그냥 필드 접근) | ⭕ **이때 DB 조회 발생 (실제 데이터 로딩)** |
