
jwt 토큰이 안들어가는 문제가 계속 발생했다.

생각을 해보니 회원가입 로직에 whitelist를 걸어주지 않았기 때문에 오류가 계속 발생을 하였다.(당연히 토큰이 생성되지 않았는데 필터에서 계속 토큰을 받아오려니 문제가 생겼다.)

public class CustomFilter implements Filter {

    private final TokenService tokenService;

    private static final List<String> WHITELIST = Arrays.asList(
            "/user/signup",  // 회원가입
            "/user/login"    // 로그인 
    );

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;

        String requestURI = httpRequest.getRequestURI();

        if (isWhitelist(requestURI)) {
            chain.doFilter(request, response);
            return;
        }

        String token = httpRequest.getHeader("Authorization");

        //토큰검증
        long userId = tokenService.verifyToken(token);

        //유저 정보 추출
        request.setAttribute("userId", userId);

        chain.doFilter(request, response);

        }
        private boolean isWhitelist(String path) {
        return WHITELIST.contains(path);

    }
}

위와 같이 회원가입과 로그인에 whitelist를 걸어주고 고민은 좀 해 본결과 Service단에서 createToken값을 가져오는것이 좋겠다고 생각이 들어 
 public LoginResponseDto loginUserService(String email, String password){
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new newValidationException("사용자를 찾을 수 없습니다.",HttpStatus.CONFLICT));
        if(passwordEncoder.matches(password, user.getPassword())){
            Long userId = user.getUserId();
            String token = tokenService.createToken(userId);
            return new LoginResponseDto(userId,token);
        }
        else throw new newValidationException("비밀번호 일치하지 않음", HttpStatus.CONFLICT);
    }
이런식으로 구현을 해주니 원하는 결과를 얻을 수 있었다.
(userId)는 제대로 나오는지 궁금해 LoginResponseDto에 같이 출력을 하도록 만들어 주었다.

