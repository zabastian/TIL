docker는 어떤 운영체제에서 작동하나?

 

리눅스이다. 즉 mac이든 window든 리눅스 커널이라는 곳에서 작동한다.

커널 : 운영체제(OS)의 핵심 부분으로, 하드웨어와 소프트웨어 사이에서 자원을 관리하고, 하드웨어를 제어하는 역할을 한다.

 

즉, JVM같은 가상머신은 어떠한 운영체제 상관없이 사용가능 하게 해주는것이고, docker는 리눅스로 다 통일하기 때문에 가상머신보다 가볍다.

 

CI/CD란?

CI(지속적 통합): 코드 통합 + 자동 빌드 및 테스트
CD(지속적 배포): 빌드된 코드를 자동으로 (스테이징/운영) 배포하는 것
Docker 다운방법

 

homebrew통해 docker설치

brew docker - 정상적인 설치 완료되었나 확인

brew install docker docker-compose           

 

====> Docker CLI 로서 터미널에서 입력한 명령어를 Docker 엔진(dockerd)에게 전달함

 

다음으로 docker docs에 들어가 docker를 다운받음

 

====> Docker 엔진으로서 실제로 컨테이너를 돌려주는 백그라운드 서비스

(macOS에서 Docker엔진 실행환경 중 하나는 docker desktop이다.)

 

Docker Layer

docker 이미지는 Docker Layer가 하나하나 쌓여서 만들어 졌다.

 

Dockerfile 명령어

-docker 이미지를 어떻게 만들 것인지 설정을 저장하는 것

 

-FROM : 베이스 이미지를 지정

-MAINTAINER:Dockerfile을 작성한 사람의 정보 입력

-LABEL : 이미지에 메타데이터를 추가

-RUN : 이미지를 생성하는 동안 실행할 명령어를 입력 

-CMD : 컨테이너 생성할 때 실행할 명령어 입력

-ENTRYPOINT : 컨테이너 시작할 때, 실행 할 명령어를 입력

-ENV : 실행 환경 지정

-WORKDIR : 작업 디렉터리를 지정

-COPY : 호스트 파일이나 디렉토리를 이미지 안에 복사한다. 

-EXPOSE : 컨테이너에서 노출할 포트 지정

 

Docker Compose

 

- 여러개의 컨테이너를 관리 (자동 배포,의존성관리,모니터링과 로깅, 테스트 환경 만들 수 있다.)

-장점 : 

한번에 여러개의 컨테이너 관리 가능

빠른 서비스 실행

같은 네트워크 쉽게 연결

 

-사용방법

1. docker image를 만들었으면 Docker Compose 실행하기 

2. docker-compose.yaml 파일 작성하기 ( 즉, 몇가지로  각각 컨테이너를 띄우는것을 하나로 통합하는 것)

3. docker compose up으로 실행 ( 현재 디렉토리docker-compose.yml 파일을 읽어서,정의된 컨테이너들을 빌드하고 실행)

 

depends_on :  mysql,redis <= api <= web 서비스 의존한다.

 

 

Docker 모니터링 & 로깅

 

도커 모니터링 : 도커 컨테이너가 어떻게 돌아가고 있는지 확인하는 것

 

docker stats : 컨테이너 모니터링의 시작점이자 간단한 모니터링 도구

 

MSA + Docker

==>MSA라고 하면 하나의 큰 시스템을, 작고 독립적인 서비스들로 나눠서 개발하고 운영하는 방식인데,

당연히 하나의 서비스에서만이 아닌 여러개의 서비스에서 버전 맞게 해주는 Docker가 필요하다,

 

실습

 

- docker pull redis => docker hub검색해서 다운받음

- docker images를 치면 다운받은 images가 나옴

 

 docker run -it -d --rm -p 6379:6370 redis

 

-it : 터미널에 연결해서 직접 입력/출력 할 때 사용

-d : 백그라운드에서 사용(즉, 터미널에서 종료되어도 계속 동작하게 하려면 백그라운드에서 컨테이너가 계속 돌아감)

--rm : stop을 하면 정보를 다 삭제하는데 실제 서비스 환경에서는 log라던지 정보저장위해 사용하지 않음(테스트에서 쓴다)

-p : 포트연결

6370:6379 : 호스트포트(6370)를 컨테이너포트(6379)에 연결함

                     (호스트(네 컴퓨터)의 6370 포트가 컨테이너 내부 Redis가 사용하는 6379 포트로 연결된다는 뜻이야.)

 

그렇다면 여기서 어떻게 접속을 하느냐

 

docker exec -it c562d55aa053  redis-cli -p 6370:6379

 

-c562d55aa053 : 는 docker ps를 치면 container ID가 나오거나 docker desktop에서 가져온다

-redis-cli :

                 기본적으로 로컬(127.0.0.1)의 Redis 서버(포트 6379)에 접속해서 명령어를 주고받음

                 즉, 내 컴퓨터에 Redis 서버가 켜져 있으면 바로 연결 가능

 

ping: 살았는지 죽었는지 확인( 살아있으면 pong으로 나옴)

exit : 나가는 명령어
